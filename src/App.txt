import 'bootstrap/dist/css/bootstrap.css';
import { useState, useRef, useEffect } from 'react';
import './App.css';

function App() {
  // Timer
  const timer = {
    break: 60 * 5,
    session: 60 * 25,
    sessionBreak: 'Session',
  }

  // State
  const [time, setTime] = useState(timer.session);
  const [breakTime, setBreakTime] = useState(timer.break);
  const [sessionTime, setSessionTime] = useState(timer.session);
  const [startButtonClicked, setStartButtonClicked] = useState(false);
  const [currentTimer, setCurrentTimer] = useState('Session');

  const timerRef = useRef(null);

  const beepSoundRef = useRef(null);
  const beepSound = beepSoundRef.current;

  useEffect(() => {
    if(time < 0) {
      console.log("SWITCH"); // TEST
      playBeepSound();
      switchTimer();
    }
  }, [time]);

  // Convert display time
  const convertTime = (time) => {
    let minutes = Math.floor(time / 60);
    let seconds = time % 60;
    // Add 0 to seconds if less than 10
    if (minutes < 10 && seconds > 10) {
      minutes = `0${minutes}`;
    } else if (minutes < 10 && seconds < 10) {
      minutes = `0${minutes}`;
      seconds = `0${seconds}`;
    } else if (minutes > 10 && seconds < 10) {
      seconds = `0${seconds}`;
    } 
    // Add colon between minutes and seconds
    return `${minutes}:${seconds}`;
  }

  // Convert break and session time
  const convertBreakSession = (time) => {
    let minutes = Math.floor(time / 60);
    return minutes;
  }

  // Reset timer
  const resetTimer = () => {
    clearInterval(timerRef.current);
    setStartButtonClicked(false);
    setTime(timer.session);
    setBreakTime(timer.break);
    setSessionTime(timer.session);
    setCurrentTimer('Session');
    
    if (beepSound) {
      beepSound.pause();
      beepSound.currentTime = 0;
    }
  }

  // Decrement break
  const decrementBreak = () => {
    if (startButtonClicked === true) {
      return null;
    } else {
      setBreakTime((prevBreakTime) => (prevBreakTime < 120 ? 60 : prevBreakTime - 60));
    }
  }

  // Increment break
  const incrementBreak = () => {
    if (startButtonClicked === true) {
      return null;
    } else {
      setBreakTime((prevBreakTime) => (prevBreakTime > 3540 ? 3600 : prevBreakTime + 60));
    }
  }

  // Decrement session
  const decrementSession = () => {
    if (startButtonClicked === true) {
      return null;
    } else {
      setSessionTime((prevSessionTime) => (prevSessionTime < 120 ? 60 : prevSessionTime - 60));
      setTime((prevTime) => (prevTime < 120 ? 60 : prevTime - 60));
    }
  }

  // Increment session
  const incrementSession = () => {
    if (startButtonClicked === true) {
      return null;
    } else {
      setSessionTime((prevSessionTime) => (prevSessionTime > 3540 ? 3600 : prevSessionTime + 60));
      setTime((prevTime) => (prevTime > 3540 ? 3600 : prevTime + 60));
    }
  }



  // Start/Stop timer
  const startStopTimer = () => {
    setStartButtonClicked((prevState) => !prevState);

    if(!startButtonClicked) {
      // Start the timer
      console.log('START THE TIMER');
      timerRef.current = setInterval(() => {
        setTime((prevTime) => prevTime - 1);
      }, 1000);
    } else {
      // Stop the timer
      console.log('STOP THE TIMER');
      clearInterval(timerRef.current);
    }
  };

  // Switch between session and break timers
  const switchTimer = () => {
    if(currentTimer === 'Session') {
      console.log('to BREAK'); // TEST
      setCurrentTimer('Break');
      setTime(breakTime);
    } else {
      console.log('to SESSION'); // TEST
      setCurrentTimer('Session');
      setTime(sessionTime);
    }
  };


  // Play beep sound
  const playBeepSound = () => {
    beepSound.currentTime = 0; // Reset sound to the beginning
    beepSound.play();

    // Stop the sound after 1 second
    setTimeout(() => {
      beepSound.pause();
      beepSound.currentTime = 0;
    }, 1000);
  }

  return (

    <div className='container'>
      {/* Break&Session Row */}
      <div className='row'>
        {/* Break Column */}
        <div className='col-sm-6'>
          <div id='break-label'>
            <button onClick={decrementBreak} id='break-decrement'>down</button>
            <p id='break-length'>{convertBreakSession(breakTime)}</p>
            <button onClick={incrementBreak} id='break-increment'>up</button>
          </div>
        </div>
        {/* Session Column */}
        <div className='col-sm-6'>
          <div id='session-label'>
            <button onClick={decrementSession} id='session-decrement'>down</button>
            <p id='session-length'>{convertBreakSession(sessionTime)}</p>
            <button onClick={incrementSession} id='session-increment'>up</button>
          </div>
        </div>
      </div>

      {/* Timer Row */}
      <div className='row'>
        <div className='col-sm-6'>
          <div id='timer-label'>
            {currentTimer}
            <div id='time-left'>{convertTime(time)}</div>
          </div>
          {/* Timer beep sound */}
          <audio id='beep' ref={beepSoundRef} src='https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav'></audio>
        </div>
      </div>

      {/* Start/Stop Row */}
      <div className='row'>
        <div className='col-sm-6'>
          {/* audio tag for timer beep */}
          <button onClick={startStopTimer} id='start_stop'>
            {startButtonClicked ? 'Stop' : 'Start'}
          </button>
        </div>
      </div>

      {/* Reset Row */}
      <div className='row'>
        <div className='col-sm-6'>
          <button onClick={resetTimer} id='reset'>
            Reset
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;